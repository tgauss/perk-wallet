import { NextRequest, NextResponse } from 'next/server';
import { randomBytes } from 'crypto';
import { PKPass } from 'passkit-generator';

export async function POST(request: NextRequest) {
  // Guard: dev only, require APP_EMULATOR_SECRET
  const hasEmulatorSecret = !!process.env.APP_EMULATOR_SECRET;
  const isDev = process.env.NODE_ENV === 'development';
  
  if (!hasEmulatorSecret) {
    return NextResponse.json(
      { error: 'APP_EMULATOR_SECRET required for this feature' },
      { status: 403 }
    );
  }
  
  if (!isDev && process.env.VERCEL_ENV === 'production') {
    return NextResponse.json(
      { error: 'This endpoint is only available in development' },
      { status: 403 }
    );
  }
  
  try {
    const certBase64 = process.env.APPLE_PASS_CERT_P12_BASE64;
    const certPassword = process.env.APPLE_PASS_CERT_PASSWORD;
    const passTypeId = process.env.APPLE_PASS_TYPE_IDENTIFIER;
    const teamId = process.env.APPLE_TEAM_IDENTIFIER;
    
    if (!certBase64 || !certPassword || !passTypeId || !teamId) {
      return NextResponse.json(
        { error: 'Missing required Apple configuration' },
        { status: 500 }
      );
    }
    
    // Generate test serial number
    const serialNumber = 'TEST-' + randomBytes(8).toString('hex').toUpperCase();
    
    // Create minimal pass.json
    const passJson: any = {
      formatVersion: 1,
      passTypeIdentifier: passTypeId,
      serialNumber: serialNumber,
      teamIdentifier: teamId,
      organizationName: 'Perk Wallet Dev',
      description: 'Doctor smoke test',
      barcodes: [{
        format: 'PKBarcodeFormatQR',
        message: 'TEST-APPLE-DOCTOR',
        messageEncoding: 'iso-8859-1'
      }],
      backgroundColor: 'rgb(20, 20, 20)',
      foregroundColor: 'rgb(255, 255, 255)',
      labelColor: 'rgb(200, 200, 200)',
      generic: {
        primaryFields: [{
          key: 'test',
          label: 'TEST PASS',
          value: 'Doctor Check âœ“'
        }],
        secondaryFields: [{
          key: 'generated',
          label: 'GENERATED',
          value: new Date().toLocaleString()
        }],
        auxiliaryFields: [{
          key: 'serial',
          label: 'SERIAL',
          value: serialNumber
        }],
        backFields: [{
          key: 'info',
          label: 'Information',
          value: 'This is a test pass generated by the Perk Wallet Apple Doctor. It verifies that your Apple Pass signing certificate is correctly configured.'
        }]
      }
    };
    
    // Create minimal 1x1 PNG buffers (transparent)
    const icon = Buffer.from('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==', 'base64');
    const logo = Buffer.from('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==', 'base64');
    
    // Create PKPass - passkit-generator v3 style
    const pass = new PKPass({
      'icon.png': icon,
      'icon@2x.png': icon,
      'logo.png': logo,
      'logo@2x.png': logo
    }, {
      wwdr: '', // Skip WWDR for test
      signerCert: certBase64,
      signerKey: certBase64,
      signerKeyPassphrase: certPassword
    }, passJson);
    
    // Generate the pass buffer
    const passBuffer = await pass.getAsBuffer();
    
    if (!passBuffer || passBuffer.length === 0) {
      return NextResponse.json(
        { error: 'Failed to generate pass' },
        { status: 500 }
      );
    }
    
    // Return as downloadable .pkpass file
    return new NextResponse(passBuffer as any, {
      status: 200,
      headers: {
        'Content-Type': 'application/vnd.apple.pkpass',
        'Content-Disposition': 'attachment; filename="doctor-test.pkpass"',
        'Content-Length': passBuffer.length.toString()
      }
    });
    
  } catch (error) {
    console.error('Error generating test pass:', error);
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to generate pass' },
      { status: 500 }
    );
  }
}